#!/bin/bash
set -e
set -x
trap 'echo "‚ùå FAILED at line $LINENO with exit code $?"' ERR

# ‚úÖ –ë–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
echo "‚úÖ create-repo started"
echo "üìÇ PWD: $PWD"
echo "üìÑ FILE: $0"
echo "üë§ User: $(whoami)"
echo "üïí Time: $(date)"

SCRIPT_VERSION="{{VERSION}}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "‚ÑπÔ∏è SCRIPT_DIR: $SCRIPT_DIR"

# ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
export PLATFORM_MAP="${PLATFORM_MAP:-$HOME/.create-repo.platforms}"
export LOG_FILE="${LOG_FILE:-$HOME/.create-repo.log}"
export REPO_LIST="${REPO_LIST:-$HOME/.repo-autosync.list}"

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
for module in colors flags version update help config platform repo logger doctor git; do
  path="$SCRIPT_DIR/modules/$module.sh"
  if [[ ! -f "$path" ]]; then
    echo "‚ùå Module not found: $path"
    exit 1
  fi
  echo "üîó Loading module: $module"
  source "$path"
done

main() {
  echo "üöÄ Entered main()"

  validate_flags "$@"

  repo=""
  platform_flag=""
  interactive=false
  dry_run=false

  while [[ $# -gt 0 ]]; do
    case $1 in
      --help|-h) show_help; exit 0 ;;
      --version) show_version; exit 0 ;;
      --update) check_for_update; exit 0 ;;
      --interactive) interactive=true ;;
      --platform=*) platform_flag="${1#*=}" ;;
      --platform-status) show_platform_bindings; exit 0 ;;
      --status) print_status_all; exit 0 ;;
      --log)
        if [[ "$2" == "--errors" ]]; then
          tail -n 20 "$HOME/.create-repo-errors.log"; exit 0
        fi
        tail -n 20 "$LOG_FILE"; exit 0 ;;
      --list) print_repo_list; exit 0 ;;
      --remove)
        if [[ "$2" == "--force" ]]; then
          remove_repo_force "$(pwd)"; exit 0
        fi ;;
      --pull-only) perform_pull_only; exit 0 ;;
      --dry-run)
        export NO_PUSH=true
        dry_run=true ;;
      --sync-now) sync_now; exit 0 ;;
      --doctor) doctor_check; exit 0 ;;
      *) [[ -z "$repo" ]] && repo=$1 ;;
    esac
    shift
  done

  export dry_run=${dry_run:-false}
  echo "üß™ dry_run = $dry_run"
  echo "üß™ platform_flag = $platform_flag"

  CURRENT_FOLDER=$(realpath "$PWD")
  echo "üìç CURRENT_FOLDER = $CURRENT_FOLDER"

  load_config

  platform=$(detect_platform "$CURRENT_FOLDER" "$platform_flag" "$dry_run")
  echo "üîç PLATFORM DETECTED = $platform"
  [[ -z "$platform" ]] && platform="unknown"

  if [[ "$platform" == "unknown" ]]; then
    if [[ "$dry_run" == "true" ]]; then
      echo -e "${YELLOW}‚ö†Ô∏è Platform unknown but continuing due to dry-run${RESET}"
    else
      echo -e "${RED}‚ùå No Git platform detected.${RESET}"
      exit 1
    fi
  fi

  repo=${repo:-$(basename "$PWD")}
  branch=${default_branch:-main}
  visibility=${default_visibility:-public}

  echo "üìò Repository = $repo"
  echo "üåø Branch     = $branch"
  echo "üîê Visibility = $visibility"

  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ git —Å–æ—Å—Ç–æ—è–Ω–∏—è
  echo "üß© Git info:"
  print_git_info || echo "‚ö†Ô∏è Git info not available"

  generate_readme
  generate_gitignore

  git_init_repo "$repo" "$branch" "$platform" "$visibility" "$(date '+%Y-%m-%d %H:%M:%S')" "$LOG_FILE" "$REPO_LIST"

  show_final_message "$repo" "$branch" "$PWD" "$REPO_LIST" "$platform"

  if [[ "$dry_run" == "true" ]]; then
    echo -e "${YELLOW}‚úÖ Dry-run completed. No changes were pushed.${RESET}"
  fi
}

main "$@"
