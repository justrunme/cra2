#!/bin/bash
set -e
set -x
trap 'echo "‚ùå FAILED at line $LINENO with exit code $?"' ERR

# ‚úÖ –ú–∏–Ω–∏-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
echo "‚úÖ create-repo started"
echo "üìÇ PWD: $PWD"
echo "üìÑ BASENAME: $(basename "$0")"
echo "üìé FILE: $0"
echo "üîß Running as user: $(whoami)"

SCRIPT_VERSION="{{VERSION}}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "‚ÑπÔ∏è SCRIPT_DIR resolved as: $SCRIPT_DIR"

# ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–µ—Å–ª–∏ unset)
export PLATFORM_MAP="${PLATFORM_MAP:-$HOME/.create-repo.platforms}"
export LOG_FILE="${LOG_FILE:-$HOME/.create-repo.log}"
export REPO_LIST="${REPO_LIST:-$HOME/.repo-autosync.list}"

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
for file in colors flags version update help config platform repo logger doctor; do
  full="$SCRIPT_DIR/modules/$file.sh"
  if [[ ! -f "$full" ]]; then
    echo "‚ùå Module not found: $full"
    exit 1
  fi
  echo "üîç Loading module: $file.sh"
  source "$full"
done

# üèÅ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
  echo "üöÄ Entered main()"

  validate_flags "$@"

  repo=""
  platform_flag=""
  interactive=false
  dry_run=false

  while [[ $# -gt 0 ]]; do
    case $1 in
      --help|-h) show_help; exit 0 ;;
      --version) show_version; exit 0 ;;
      --update) check_for_update; exit 0 ;;
      --interactive) interactive=true ;;
      --platform=*) platform_flag="${1#*=}" ;;
      --platform-status) show_platform_bindings; exit 0 ;;
      --status) print_status_all; exit 0 ;;
      --log)
        if [[ "$2" == "--errors" ]]; then
          tail -n 10 "$HOME/.create-repo-errors.log"; exit 0
        fi
        tail -n 10 "$LOG_FILE"; exit 0
        ;;
      --list) print_repo_list; exit 0 ;;
      --remove)
        if [[ "$2" == "--force" ]]; then
          remove_repo_force "$(pwd)"; exit 0
        fi ;;
      --pull-only) perform_pull_only; exit 0 ;;
      --dry-run)
        export NO_PUSH=true
        dry_run=true ;;
      --sync-now) sync_now; exit 0 ;;
      --doctor) doctor_check; exit 0 ;;
      *) [[ -z "$repo" ]] && repo=$1 ;;
    esac
    shift
  done

  export dry_run=${dry_run:-false}
  echo "üß™ dry_run flag: $dry_run"
  echo "üß™ platform_flag: $platform_flag"

  CURRENT_FOLDER=$(realpath "$PWD")
  echo "üß≠ current folder: $CURRENT_FOLDER"

  load_config

  # üß† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  platform=$(detect_platform "$CURRENT_FOLDER" "$platform_flag" "$dry_run")
  echo "üì¶ Detected platform: $platform"

  [[ -z "$platform" ]] && platform="unknown"

  if [[ "$platform" == "unknown" ]]; then
    if [[ "$dry_run" == "true" ]]; then
      echo -e "${YELLOW}‚ö†Ô∏è Platform is unknown, continuing due to dry-run.${RESET}"
    else
      echo -e "${RED}‚ùå No Git platform detected.${RESET}"; exit 1
    fi
  fi

  # üß± –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  repo=${repo:-$(basename "$PWD")}
  branch=${default_branch:-main}
  visibility=${default_visibility:-public}
  echo "üìå Repo: $repo"
  echo "üìå Branch: $branch"
  echo "üìå Visibility: $visibility"

  # üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  generate_readme
  generate_gitignore
  git_init_repo "$repo" "$branch" "$platform" "$visibility" "$(date '+%Y-%m-%d %H:%M:%S')" "$LOG_FILE" "$REPO_LIST"
  show_final_message "$repo" "$branch" "$PWD" "$REPO_LIST" "$platform"

  if [[ "$dry_run" == "true" ]]; then
    echo -e "${YELLOW}This was a dry-run. No git push was executed.${RESET}"
  fi
}

main "$@"
