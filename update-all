#!/bin/bash
set -e

SCRIPT_DIR="/opt/cra2"
MODULES_DIR="$SCRIPT_DIR/modules"

source "$MODULES_DIR/colors.sh"
source "$MODULES_DIR/logger.sh"
source "$MODULES_DIR/config.sh"
source "$MODULES_DIR/platform.sh"
source "$MODULES_DIR/git.sh"

PULL_ONLY=false
DRY_RUN=false

# === Parse flags ===
for arg in "$@"; do
  case "$arg" in
    --pull-only) PULL_ONLY=true ;;
    --dry-run) DRY_RUN=true ;;
    --help)
      echo "Usage: update-all [--pull-only] [--dry-run]"
      exit 0 ;;
    *)
      echo -e "${RED}‚ùå Unknown flag: $arg${RESET}"
      echo "Use --help to see available options."
      exit 1 ;;
  esac
done

LIST_FILE="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"

if [ ! -f "$LIST_FILE" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è No repositories are being tracked yet.${RESET}"
  exit 0
fi

echo -e "${BOLD}üîÑ Starting update-all...${RESET}"

while IFS= read -r repo_path || [[ -n "$repo_path" ]]; do
  [ -z "$repo_path" ] && continue
  [ ! -d "$repo_path/.git" ] && echo -e "${RED}‚ùå Not a Git repo: $repo_path${RESET}" && continue

  cd "$repo_path" || continue
  PROJECT_NAME=$(basename "$repo_path")
  BRANCH=$(get_current_branch)

  # Load local config
  LOCAL_CONF="$repo_path/.create-repo.local.conf"
  if [[ -f "$LOCAL_CONF" ]]; then
    source "$LOCAL_CONF"
    if [[ "$disable_sync" == "true" ]]; then
      echo -e "üö´ ${YELLOW}$PROJECT_NAME skipped (disabled via local config)${RESET}"
      continue
    fi
  fi

  echo -e "\nüìÅ ${BOLD}$PROJECT_NAME${RESET} ${DIM}[$repo_path]${RESET}"
  echo -e "üîÄ Current branch: ${CYAN}$BRANCH${RESET}"

  # Git pull
  echo -e "‚¨áÔ∏è  Pulling from origin/$BRANCH..."
  if git pull origin "$BRANCH"; then
    echo -e "${GREEN}‚úÖ Pull successful${RESET}"
  else
    echo -e "${RED}‚ùå Pull failed${RESET}"
    log_error "$PROJECT_NAME (pull)" "$repo_path"
    continue
  fi

  if [[ "$PULL_ONLY" == true ]]; then
    echo "üì¶ Pull-only mode active. Skipping push."
    log_success "$PROJECT_NAME (pull-only)" "$repo_path"
    continue
  fi

  if [[ "$DRY_RUN" == true ]]; then
    echo "üß™ Dry-run: simulating push..."
    git status
    echo -e "${YELLOW}‚ö†Ô∏è Push skipped due to --dry-run${RESET}"
    log_success "$PROJECT_NAME (dry-run)" "$repo_path"
    continue
  fi

  # Git push
  echo -e "‚¨ÜÔ∏è  Pushing to origin/$BRANCH..."
  if git push origin "$BRANCH"; then
    echo -e "${GREEN}‚úÖ Push successful${RESET}"
    log_success "$PROJECT_NAME" "$repo_path"
  else
    echo -e "${RED}‚ùå Push failed${RESET}"
    log_error "$PROJECT_NAME (push)" "$repo_path"
  fi

done < "$LIST_FILE"

echo -e "${BOLD}‚úÖ update-all completed successfully${RESET}"
