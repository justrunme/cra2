#!/bin/bash

# === Resolve path to modules ===
if [[ -f "/opt/cra2/modules/colors.sh" ]]; then
  SCRIPT_DIR="/opt/cra2"
else
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

MODULES_DIR="$SCRIPT_DIR/modules"

# === Load modules ===
source "$MODULES_DIR/colors.sh"
source "$MODULES_DIR/logger.sh"
source "$MODULES_DIR/config.sh"
source "$MODULES_DIR/platform.sh"
source "$MODULES_DIR/git.sh"
source "$MODULES_DIR/utils.sh"
# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ sync_now() —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ repo.sh
# (–∏–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É pull/push)
source "$MODULES_DIR/repo.sh"

# === Default flags ===
PULL_ONLY=false
DRY_RUN=false
ONLY_TAGS=""

# === Parse flags ===
for arg in "$@"; do
  case "$arg" in
    --pull-only)
      PULL_ONLY=true
      ;;
    --dry-run)
      DRY_RUN=true
      ;;
    --only-tags=*)
      ONLY_TAGS="${arg#*=}"
      ;;
    --help)
      echo "Usage: update-all [--pull-only] [--dry-run] [--only-tags=TAG]"
      exit 0
      ;;
    *)
      echo -e "${RED}‚ùå Unknown flag: $arg${RESET}"
      suggest_flag "$arg"
      exit 1
      ;;
  esac
done

# === File paths ===
LIST_FILE="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"

# === 1) Optional Locking (if enable_lock=true in global config)
load_config  # ‚Üê –≥—Ä—É–∑–∏—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π ~/.create-repo.conf, –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å enable_lock=true
if [[ "$enable_lock" == "true" ]]; then
  LOCKFILE="/tmp/update-all.lock"
  exec 200>"$LOCKFILE"
  if ! flock -n 200; then
    echo -e "${YELLOW}‚ö†Ô∏è Another update-all is running. Exiting.${RESET}"
    exit 0
  fi
fi

# === Start ===
if [ ! -f "$LIST_FILE" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è No repos tracked. Use create-repo to track repositories.${RESET}"
  exit 0
fi

echo -e "${BOLD}üîÑ Starting sync of tracked repositories...${RESET}"

while IFS= read -r repo_path || [[ -n "$repo_path" ]]; do
  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  [ -z "$repo_path" ] && continue

  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ git
  if [ ! -d "$repo_path/.git" ]; then
    echo -e "${RED}‚ùå Not a Git repo: $repo_path${RESET}"
    continue
  fi

  cd "$repo_path" || continue
  PROJECT_NAME=$(basename "$repo_path")

  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
  LOCAL_CONF="$repo_path/.create-repo.local.conf"
  if [ -f "$LOCAL_CONF" ]; then
    echo "‚ÑπÔ∏è Loading local config: $LOCAL_CONF"
    source "$LOCAL_CONF"
    if [[ "$disable_sync" == "true" ]]; then
      echo -e "üö´ ${YELLOW}$PROJECT_NAME skipped (disabled via local config)${RESET}"
      continue
    fi
  fi

  # 2) selective sync by tags (ONLY_TAGS vs sync_tags)
  if [ -n "$ONLY_TAGS" ]; then
    # sync_tags="prod,critical" (–∫ –ø—Ä–∏–º–µ—Ä—É)
    if [[ -z "$sync_tags" ]]; then
      echo "üö´ $PROJECT_NAME has no sync_tags, skipping"
      continue
    fi
    # –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    # –µ—Å–ª–∏ $sync_tags="prod,critical" –∏ $ONLY_TAGS="prod"
    intersect=$(echo "$sync_tags" | grep -o "$ONLY_TAGS" || true)
    if [ -z "$intersect" ]; then
      echo "üö´ $PROJECT_NAME (tags: $sync_tags) doesn't match --only-tags=$ONLY_TAGS, skipping"
      continue
    fi
  fi

  echo -e "\nüìÅ ${BOLD}$PROJECT_NAME${RESET} ${DIM}[$repo_path]${RESET}"

  # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É pull/push, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å;
  # –Ω–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –≤ repo.sh –µ—Å—Ç—å sync_now() (–∏–ª–∏ perform_sync).
  # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤—ã–∑–æ–≤–µ–º sync_now, –ø–µ—Ä–µ–¥–∞–¥–∏–º PULL_ONLY, DRY_RUN, etc.
  if [ "$PULL_ONLY" = true ]; then
    echo "üåÄ Pull-only mode ‚Üí skipping push"
    export PULL_ONLY=true
  fi
  if [ "$DRY_RUN" = true ]; then
    export NO_PUSH=true
  fi

  # –í—ã–∑–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–º. repo.sh)
  # –ï—Å–ª–∏ –µ—ë –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å –ª–æ–≥–∏–∫—É, –∫–∞–∫ –±—ã–ª–∞.
  if sync_now; then
    # –£—Å–ø–µ—Ö
    log_success "$PROJECT_NAME" "$repo_path"
  else
    # –ù–µ—É–¥–∞—á–∞
    echo -e "${RED}‚ùå Sync failed${RESET}"
    log_error "$PROJECT_NAME" "$repo_path"
  fi

done < "$LIST_FILE"
