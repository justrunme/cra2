name: Auto Tag, Build, Test and Release (DEB + macOS)

on:
  push:
    branches:
      - main

jobs:
  autotag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🔖 Generate version tag
        id: set_version
        run: |
          git fetch --tags
          latest=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sed 's/^v//' | sort -V | tail -n1)
          if [[ -z "$latest" ]]; then
            major=1; minor=0; patch=0
          else
            IFS='.' read -r major minor patch <<< "$latest"
            patch=$((patch + 1))
          fi
          version="v$major.$minor.$patch"
          git tag -f "$version"
          git push origin -f "$version"
          echo "version=$version" >> "$GITHUB_OUTPUT"

  test:
    runs-on: ubuntu-latest
    needs: autotag
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🧪 Run all tests
        run: |
          chmod +x create-repo
          export CREATE_REPO_BIN="$PWD/create-repo"
          chmod +x tests/*.sh
          for t in tests/test_*.sh; do
            echo "▶️ Running $t"
            bash "$t"
          done

  build-deb:
    runs-on: ubuntu-latest
    needs: [autotag, test]
    steps:
      - uses: actions/checkout@v4

      - name: ✅ Verify required modules (Linux)
        run: |
          REQUIRED_MODULES=(
            colors.sh flags.sh version.sh update.sh help.sh config.sh
            platform.sh repo.sh logger.sh utils.sh cron.sh git.sh status.sh
          )
          for mod in "${REQUIRED_MODULES[@]}"; do
            if [ ! -f "modules/$mod" ]; then
              echo "❌ Missing module: $mod"
              exit 1
            fi
          done

      - name: 📦 Build DEB package
        run: |
          VERSION="${{ needs.autotag.outputs.version }}"
          mkdir -p pkg/usr/local/bin/modules pkg/DEBIAN
          cp create-repo update-all install-create-repo.sh pkg/usr/local/bin/
          cp modules/*.sh pkg/usr/local/bin/modules/
          chmod +x pkg/usr/local/bin/*

          sed -i "s|{{VERSION}}|$VERSION|g" pkg/usr/local/bin/create-repo

          cat <<EOF > pkg/DEBIAN/control
Package: create-repo
Version: ${VERSION#v}
Section: utils
Priority: optional
Architecture: all
Maintainer: you@example.com
Description: Git auto-sync CLI with modular structure
EOF

          echo "#!/bin/bash" > pkg/DEBIAN/postinst
          echo "echo ✅ Installed create-repo ${VERSION#v}" >> pkg/DEBIAN/postinst
          chmod +x pkg/DEBIAN/postinst

          dpkg-deb --build pkg
          mv pkg.deb create-repo_${VERSION#v}.deb
          sha256sum create-repo_*.deb > checksums.txt

  build-mac:
    runs-on: macos-latest
    needs: [autotag, test]
    steps:
      - uses: actions/checkout@v4

      - name: ✅ Verify required modules (macOS)
        run: |
          REQUIRED_MODULES=(
            colors.sh flags.sh version.sh update.sh help.sh config.sh
            platform.sh repo.sh logger.sh utils.sh cron.sh git.sh status.sh
          )
          for mod in "${REQUIRED_MODULES[@]}"; do
            if [ ! -f "modules/$mod" ]; then
              echo "❌ Missing module: $mod"
              exit 1
            fi
          done

      - name: 📦 Build PKG package
        run: |
          VERSION="${{ needs.autotag.outputs.version }}"
          mkdir -p pkg-root/usr/local/bin/modules
          cp create-repo update-all install-create-repo.sh pkg-root/usr/local/bin/
          cp modules/*.sh pkg-root/usr/local/bin/modules/
          chmod +x pkg-root/usr/local/bin/*
          sed -i '' "s|{{VERSION}}|$VERSION|g" pkg-root/usr/local/bin/create-repo

          pkgbuild \
            --identifier com.justrunme.create-repo \
            --version ${VERSION#v} \
            --install-location / \
            --root pkg-root \
            create-repo_${VERSION#v}.pkg

          shasum -a 256 create-repo_*.pkg >> checksums.txt

  release:
    runs-on: ubuntu-latest
    needs: [build-deb, build-mac, autotag]
    steps:
      - uses: actions/checkout@v4

      - name: 🚀 Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.autotag.outputs.version }}
          name: Release ${{ needs.autotag.outputs.version }}
          body: |
            🔄 Auto-generated release
            ✏️ Version: ${{ needs.autotag.outputs.version }}
            📦 Includes:
            - create-repo
            - update-all
            - install-create-repo.sh
            - All modules
            - .deb and .pkg installers
          files: |
            create-repo_*.deb
            create-repo_*.pkg
            install-create-repo.sh
            checksums.txt
